--- process.go	2022-02-25 13:55:08.495662120 +0800
+++ process.fix.go	2022-02-25 15:41:20.770653905 +0800
@@ -4,6 +4,7 @@ import (
 	"context"
 	"encoding/json"
 	"errors"
+	"reflect"
 	"runtime"
 	"sort"
 	"sync"
@@ -275,13 +276,45 @@ func (p *Process) IsRunning() (bool, err
 	return p.IsRunningWithContext(context.Background())
 }
 
+func Is(err, target error) bool {
+	if target == nil {
+		return err == target
+	}
+
+	isComparable := reflect.TypeOf(target).Comparable()
+	for {
+		if isComparable && err == target {
+			return true
+		}
+		if x, ok := err.(interface{ Is(error) bool }); ok && x.Is(target) {
+			return true
+		}
+		// TODO: consider supporting target.Is(err). This would allow
+		// user-definable predicates, but also may allow for coping with sloppy
+		// APIs, thereby making it easier to get away with them.
+		if err = Unwrap(err); err == nil {
+			return false
+		}
+	}
+}
+
+func Unwrap(err error) error {
+	u, ok := err.(interface {
+		Unwrap() error
+	})
+	if !ok {
+		return nil
+	}
+	return u.Unwrap()
+}
+
 func (p *Process) IsRunningWithContext(ctx context.Context) (bool, error) {
 	createTime, err := p.CreateTimeWithContext(ctx)
 	if err != nil {
 		return false, err
 	}
 	p2, err := NewProcessWithContext(ctx, p.Pid)
-	if errors.Is(err, ErrorProcessNotRunning) {
+	if Is(err, ErrorProcessNotRunning) {
 		return false, nil
 	}
 	createTime2, err := p2.CreateTimeWithContext(ctx)
